plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.2'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

group = 'sparta.barointern'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {

    /* library */

    // spring web mvc
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // spring security
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // jpa
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // postgresql
    runtimeOnly 'org.postgresql:postgresql'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // docker compose support
    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'

    // mapStruct
    implementation 'org.mapstruct:mapstruct:1.6.3'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'

    // swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.4'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.6'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.6'

    /* test */

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport' // test 끝나면 jacocoTestReport 동작
}

// jacoco report 설정
jacocoTestReport {
    reports {
        // 리포트 타입마다 리포트 저장 경로를 설정할 수 있습니다.
        html.destination file("jacoco/report")
    }

    // 커버리지 보고서 제외 범위 설정
    getClassDirectories().setFrom(
            files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                        "**/*Application*",
                        "**/*Config*",
                        "**/dto",
                        "**/*Exception*"
                ])
            })
    )

    // jacocoTestReport 끝나면 jacocoTestCoverageVerification 동작
    finalizedBy 'jacocoTestCoverageVerification'
}

// jacoco 커버리지 검증 설정
jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true // 커버리지 적용 여부
            element = 'CLASS' // 커버리지 적용 단위

            excludes = [
                    "**/*Application*",
                    "**/*Config*",
                    "**/dto",
                    "**/*Exception*"
            ]
        }
    }
}